#pragma kernel InitHeader
#pragma kernel InitNode
#pragma kernel EmitTrail

#pragma kernel UpdateSourceBuffer
#pragma kernel UpdateFromSourceBuffer
#pragma kernel AppendDeadToNodePool

#define TRAIL_BLOCK_SIZE 1

// #define SourceType Particle
#define SourceType float3

#include "GPUTrailData.cginc"

StructuredBuffer<SourceType> _ParticleBuffer;
RWStructuredBuffer<SourceType> _SourceBuffer;

RWStructuredBuffer<TrailHeader> _TrailHeaderBuffer;
int _TrailHeaderBufferCount;
AppendStructuredBuffer<int> _TrailHeaderIndexBufferAppend;
ConsumeStructuredBuffer<int> _TrailHeaderIndexBufferConsume;

RWStructuredBuffer<TrailNode> _TrailNodeBuffer;
int _TrailNodeBufferCount;
AppendStructuredBuffer<int> _TrailNodeIndexBufferAppend;
ConsumeStructuredBuffer<int> _TrailNodeIndexBufferConsume;
AppendStructuredBuffer<int> _TrailNodeIndexDeadBufferAppend;
ConsumeStructuredBuffer<int> _TrailNodeIndexDeadBufferConsume;


int _EmitTrailNum;
int _EmitTrailLen;

TrailHeader InitHeader(int idx, TrailHeader header)
{
    header = (TrailHeader)0;
    header.state = TS_READY;
    header.first = -1;
    header.currentlength = -1;
    header.maxLength = -1;
    return header;
}
TrailNode InitNode(int idx, TrailNode node)
{
    node = (TrailNode)0;
    node.prev = node.next = -1;
    node.idx = idx;
    node.localIdx = 0;
    node.pos = 0;
    return node;
}


[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void InitHeader (uint3 id : SV_DispatchThreadID)
{
    const int hid = id.x;
    if(hid >= _TrailHeaderBufferCount) return;

    _TrailHeaderBuffer[hid] = InitHeader(hid, _TrailHeaderBuffer[hid]);
    _TrailHeaderIndexBufferAppend.Append(hid);
}
 
[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void InitNode (uint3 id : SV_DispatchThreadID)
{
    const int nid = id.x;
    if(nid >= _TrailNodeBufferCount) return;

    _TrailNodeBuffer[nid] = InitNode(nid, _TrailNodeBuffer[nid]);
    _TrailNodeIndexBufferAppend.Append(nid);
}

[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void EmitTrail (uint3 id : SV_DispatchThreadID)
{
    const int tid = id.x;
    if(tid >= _EmitTrailNum) return;

    const int hid = _TrailHeaderIndexBufferConsume.Consume();
    const int maxLength = _EmitTrailLen;

    TrailHeader header = _TrailHeaderBuffer[hid];
    header = InitHeader(hid, header);
    header.state = TS_ACTIVE;
    header.currentlength = 0;
    header.maxLength = maxLength;
    _TrailHeaderBuffer[hid] = header;
}


[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void UpdateSourceBuffer (uint3 id : SV_DispatchThreadID)
{
    const int pid = id.x;
    _SourceBuffer[pid] = _ParticleBuffer[pid];
}

[numthreads(TRAIL_BLOCK_SIZE,1,1)]
void UpdateFromSourceBuffer (uint3 id : SV_DispatchThreadID)
{
    const int hid = id.x;
    TrailHeader header = _TrailHeaderBuffer[hid];
    if(!IsActive(header)) return;

    const int firstid = header.first;
    const int maxLength = header.maxLength;
    int currentlength = header.currentlength;

    const int pid = hid;
    SourceType p = _SourceBuffer[pid];

    if(currentlength == maxLength)
    {
        int last = firstid;
        while(last != -1 && _TrailNodeBuffer[last].next != -1) last = _TrailNodeBuffer[last].next;
        int prev = _TrailNodeBuffer[last].prev;
        _TrailNodeBuffer[prev].next = -1;
        _TrailNodeIndexDeadBufferAppend.Append(last);
        currentlength--;
    }

    int nid = _TrailNodeIndexBufferConsume.Consume();
    header.currentlength = currentlength+1;

    TrailNode node = _TrailNodeBuffer[nid];
    node = InitNode(nid, node);

    if(firstid != -1)
    {
        TrailNode first = _TrailNodeBuffer[firstid];
        first.prev = node.idx;
        node.next = first.idx;
        _TrailNodeBuffer[firstid] = first;
    }

    header.first = nid;
    node.pos = p;
    // node.pos = float3(currentlength, 0, 0);

    _TrailHeaderBuffer[hid] = header;
    _TrailNodeBuffer[nid] = node;
}

[numthreads(1,1,1)]
void AppendDeadToNodePool (uint3 id : SV_DispatchThreadID)
{
    const int nid = _TrailNodeIndexDeadBufferConsume.Consume();
    _TrailNodeBuffer[nid] = InitNode(nid, _TrailNodeBuffer[nid]);
    _TrailNodeIndexBufferAppend.Append(nid);
}
